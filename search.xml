<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mybatis的学习</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用软编码的好处"><a href="#使用软编码的好处" class="headerlink" title="- 使用软编码的好处"></a>- 使用软编码的好处</h2><p><strong>硬编码:</strong> 将数据直接写入代码进行编译开发,若发生需要更改的问题,就需要更改源代码<br><strong>软编码:</strong> 将数据与源代码解耦(分开处理), mybatis将sql于底层代码分离, 后期维护修改更为方便</p><h2 id="mybatis入门使用"><a href="#mybatis入门使用" class="headerlink" title="- mybatis入门使用"></a>- mybatis入门使用</h2><p><strong>流程：</strong><br>    - 定义pojo类(xxxx.pojo.类名)<br>    - 加载核心配置文件,获取SqlSessionFactory对象<br>    - 获取SqlSession对象,执行sql语句<br>    - 释放资源</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 加载mybatis核心配置文件,获取SqlSessionFactory</span></span><br><span class="line">String resource =<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = <span class="module-access"><span class="module"><span class="identifier">Resources</span>.</span></span>get<span class="constructor">ResourceAsStream(<span class="params">resource</span>)</span>;</span><br><span class="line">SqlSessionFactory sqlSessionFactory =<span class="keyword">new</span> <span class="constructor">SqlSessionFactoryBuilder()</span>.build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取SqlSession对象,用它来执行sql</span></span><br><span class="line">SqlSession sqlSession =sqlSessionFactory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行sql</span></span><br><span class="line">List&lt;students&gt; students =sqlSession.select<span class="constructor">List(<span class="string">&quot;test.selectAll&quot;</span>)</span>;<span class="comment">//内容为名称空间.id,来源自对应编写的Mapper.xml文件</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(students);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 释放资源</span></span><br><span class="line">sqlSession.close<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="Mapper代理"><a href="#Mapper代理" class="headerlink" title="- Mapper代理"></a>- Mapper代理</h2><p><strong>目的:</strong> 解决原生方式中的硬编码(入门代码第3步); 简化后期执行sql<br><strong>步骤:</strong> </p><ol><li>定义与sql映射文件同名的Mapper接口,并将Mapper接口与sql映射文件置于同一目录下</li><li>设置sql映射文件的namespace属性为Mapper接口全限定名</li><li>在Mapper接口中定义方法,方法名就是sql映射文件中sql语句的id,并保持参数类型和返回值类型一致</li><li>编码：通过SqlSession的getMapper方法获取Mapper接口的代理对象; 调用对应方法完成sql的执行</li></ol><p><strong>包扫描:</strong>  若Mapper接口名称与SQL映射文件名称相同,且在同一目录下,可使用包扫描的方式简化sql映射文件加载,即同一个包的文件只需要于mybatis-config.xml中输入以下代码,就无需在一条条加载映射文件:<code> &lt;package name=&quot;包路径&quot;/&gt;</code></p><p>eg:用Mapper代理实现查询全部数据操作</p><ol><li><p>mapper接口书写:<code>List&lt;students&gt; selectAll();</code></p></li><li><p>xml处书写:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper <span class="keyword">namespace</span>=<span class="string">&quot;myTest.mapper.testDemoMapper&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">select</span> id=<span class="string">&quot;selectAll&quot;</span> resultType=<span class="string">&quot;myTest.pojo.students&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> studentsinformation;</span><br><span class="line">    &lt;/<span class="keyword">select</span>&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试用例处书写:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 加载mybatis核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">String resource =<span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">inputStream inputStream = <span class="module-access"><span class="module"><span class="identifier">Resources</span>.</span></span>get<span class="constructor">ResourceAsStream(<span class="params">resource</span>)</span>;</span><br><span class="line">SqlSessionFactory sqlSessionFactory =<span class="keyword">new</span> <span class="constructor">SqlSessionFactoryBuilder()</span>.build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line">SqlSession sqlSession =sqlSessionFactory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 获取Mapper接口的代理对象并执行</span></span><br><span class="line">testDemoMapper testDemoMapper =sqlSession.get<span class="constructor">Mapper(<span class="params">testDemoMapper</span>.<span class="params">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//4.执行方法</span></span><br><span class="line">List&lt;students&gt; students =testDemoMapper.select<span class="constructor">All()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(students);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 释放资源</span></span><br><span class="line">sqlSession.close<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="mybatis的参数占位符"><a href="#mybatis的参数占位符" class="headerlink" title="- mybatis的参数占位符"></a>- mybatis的参数占位符</h2><ul><li>#{} :会将此处替换为? 防止sql注入</li><li>${} :拼接sql语句 会存在sql注入问题</li><li>使用时机: 参数传递的时候使用#{}; 表名或列名不固定时使用${}</li></ul><h2 id="使用mybatis进行增删改查"><a href="#使用mybatis进行增删改查" class="headerlink" title="- 使用mybatis进行增删改查"></a>- 使用mybatis进行增删改查</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p><strong>注:</strong> 使用模糊查询时需在测试类中进行数据处理，如:  <code> name=&quot;%&quot;+name+&quot;%&quot;;</code></p><ul><li><p><strong>多条件查询:</strong> </p><ul><li><p><strong>于mapper接口的参数接收:</strong> </p><ol><li>散装参数：如果方法中存在多个参数,需要使用@Param(“sql参数占位符名称)置于数据类型前</li><li>实体类封装参数: 需要保证sql中的参数名和实体类属性名对应</li><li>map集合: 需要保证sql中的参数和map集合的键名对应</li></ol></li><li><p><strong>于xml文件中sql语句的书写:</strong><br>eg: </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=&quot;selectAll&quot; resultType=&quot;myTest.pojo.students&quot;&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> studentsinformation <span class="keyword">where</span> nums = #&#123;nums&#125; <span class="keyword">and</span> <span class="type">name</span> <span class="keyword">like</span> #&#123;<span class="type">name</span>&#125; </span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>存在问题:</strong> 当用户输入的参数个数与sql语句参数个数不一致时会导致查询失败</p></li></ul></li><li><p><strong>多条件动态查询:</strong></p><ul><li><strong>目的:</strong> 为了解决普通多条件查询中用户输入参数个数与sql语句参数个数不一致造成的查询失败</li><li><strong>于xml文件中sql语句的书写:</strong> &lt;if&gt;，用于判断参数是否有值,使用test属性进行条件判断,使用时配合&lt;where&gt;标签替换where关键词<br>eg: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;selectByCondition&quot;</span> resultType=<span class="string">&quot;myTest.pojo.students&quot;</span>&gt;</span><br><span class="line">  select * from studentsinformation</span><br><span class="line">    &lt;<span class="built_in">where</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;statement !=null&quot;</span>&gt;</span><br><span class="line">            and statement =<span class="comment">#&#123;statement&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;nums !=null&quot;</span>&gt;</span><br><span class="line">            and nums =<span class="comment">#&#123;nums&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;name != null and name !=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">            and name =<span class="comment">#&#123;name&#125;</span></span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>单条件动态查询</strong></p><ul><li><strong>目的:</strong> 当用户从多个条件中选择一个时，根据该条件输出对应内容</li><li><strong>于xml文件中的书写:</strong> &lt;choose&gt;(&lt;when&gt;,&lt;otherwise&gt;)选择,&lt;choose&gt;类似于java的switch,&lt;when&gt;类似case,&lt;otherwise&gt;类似default,一般用&lt;where&gt;标签包裹语句而不单独写&lt;default&gt;<br>eg:<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">select</span> id=&quot;selectByConditionSinger&quot; resultType=&quot;myTest.pojo.students&quot;&gt;</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> studentsinformation</span><br><span class="line">    &lt;<span class="keyword">where</span>&gt;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;<span class="keyword">when</span> test=&quot;nums !=null&quot;&gt;</span><br><span class="line">                nums =#&#123;nums&#125;</span><br><span class="line">            &lt;/<span class="keyword">when</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">when</span> test=&quot;name !=null and name!=&#x27;&#x27; &quot;&gt;</span><br><span class="line">                <span class="type">name</span> =#&#123;<span class="type">name</span>&#125;</span><br><span class="line">            &lt;/<span class="keyword">when</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">when</span> test=&quot;statement !=null&quot;&gt;</span><br><span class="line">                <span class="keyword">statement</span> =#&#123;<span class="keyword">statement</span>&#125;</span><br><span class="line">            &lt;/<span class="keyword">when</span>&gt;</span><br><span class="line">        &lt;/choose&gt;</span><br><span class="line">    &lt;/<span class="keyword">where</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ul><li><strong>于mapper接口:</strong> void返回,参数值为实体类对象,添加成功与否于测试类中用异常判断,语句写完后需执行sqlSession.commit()提交,因为mybatis默认关闭了事务自动提交,需手动提交,否则会回滚事务,且主键自增1</li><li><strong>于xml文件中的书写:</strong> 无需填写主键,主键由系统自增长生成<br>  eg:  <figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;nums&quot;</span>&gt;</span>  <span class="comment">&lt;!-- useGeneratedKeys=&quot;true&quot; keyProperty=&quot;nums&quot;决定了主键的值能够返回,一定要填写,由mybatisX生成的语句不自带该参数 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    insert into studentsinformation(name, sex, birth, score, email, phone, statement)</span></span><br><span class="line"><span class="language-xml">    values(#</span><span class="template-variable">&#123;name&#125;</span><span class="language-xml">,#</span><span class="template-variable">&#123;sex&#125;</span><span class="language-xml">,#</span><span class="template-variable">&#123;birth&#125;</span><span class="language-xml">,#</span><span class="template-variable">&#123;score&#125;</span><span class="language-xml">,#</span><span class="template-variable">&#123;email&#125;</span><span class="language-xml">,#</span><span class="template-variable">&#123;phone&#125;</span><span class="language-xml">,#</span><span class="template-variable">&#123;statement&#125;</span><span class="language-xml">);</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><strong>修改全部字段</strong><ul><li><p><strong>于mapper接口:</strong> void返回,参数值为实体类对象,修改成功与否于测试类中用异常判断,语句写完后需执行sqlSession.commit()提交,因为mybatis默认关闭了事务自动提交,需手动提交,否则会回滚事务</p></li><li><p><strong>于xml文件中的书写:</strong> 根据主键id,来修改对应内容<br>eg:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;update <span class="built_in">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span><br><span class="line">    update studentsinformation</span><br><span class="line">    <span class="built_in">set</span> name=<span class="comment">#&#123;name&#125;,</span></span><br><span class="line">    sex=<span class="comment">#&#123;sex&#125;,</span></span><br><span class="line">    birth=<span class="comment">#&#123;birth&#125;,</span></span><br><span class="line">    score=<span class="comment">#&#123;score&#125;,</span></span><br><span class="line">    email=<span class="comment">#&#123;email&#125;,</span></span><br><span class="line">    phone=<span class="comment">#&#123;phone&#125;,</span></span><br><span class="line">    statement=<span class="comment">#&#123;statement&#125;</span></span><br><span class="line">    <span class="built_in">where</span> nums=<span class="comment">#&#123;nums&#125;;</span></span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>存在问题:</strong> 当用户输入的参数个数与sql语句参数个数不一致时会导致没设置参数的值变成null,因此需要使用动态方法</p></li></ul></li><li><strong>修改动态字段(不固定参数个数)</strong><ul><li><strong>于xml文件中的书写:</strong> &lt;if&gt;，用于判断参数是否有值,使用test属性进行条件判断,使用时配合&lt;set&gt;标签替换set,防止报错<br>eg：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    &lt;update <span class="built_in">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span><br><span class="line">    update studentsinformation</span><br><span class="line">    &lt;<span class="built_in">set</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;name!=null and name!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">    name=<span class="comment">#&#123;name&#125;,</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;sex!=null and sex!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">    sex=<span class="comment">#&#123;sex&#125;,</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;birth!=null and birth!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">    birth=<span class="comment">#&#123;birth&#125;,</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;score!=null&quot;</span>&gt;</span><br><span class="line">    score=<span class="comment">#&#123;score&#125;,</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;email!=null and email!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">    email=<span class="comment">#&#123;email&#125;,</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;phone!=null and phone!=&#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">    phone=<span class="comment">#&#123;phone&#125;,</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="built_in">test</span>=<span class="string">&quot;statement!=null&quot;</span>&gt;</span><br><span class="line">    statement=<span class="comment">#&#123;statement&#125;</span></span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">    <span class="built_in">where</span> nums=<span class="comment">#&#123;nums&#125;;</span></span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li><p><strong>删除一个</strong></p><ul><li><strong>于mapper接口:</strong> void返回,参数值为用户id,修改成功与否于测试类中用异常判断,语句写完后需执行sqlSession.commit()提交,因为mybatis默认关闭了事务自动提交,需手动提交,否则会回滚事务</li><li><strong>于xml文件中书写:</strong><br>eg: <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">delete</span> id=<span class="string">&quot;deleteById&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> studentsinformation where nums =<span class="comment">#&#123;nums&#125;;</span></span><br><span class="line">&lt;/<span class="keyword">delete</span>&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>批量删除(删除多个)</strong></p><ul><li><strong>于mapper接口:</strong> void返回，参数值为数组，并使用@Param注解,注解名与数组名相同(mybatis会把数组参数封装成一个Map集合，默认用array替换数组,因此需要用@Param注解改变Map集合的默认key名称)</li><li><strong>于xml文件中书写:</strong> 使用&lt;foreach&gt;标签,与 in() 关键字来完成数组遍历,其中&lt;foreach&gt;的参数含义: collection表示数组名,item表示数组每个元素含义, separator表示连接符<br>eg:<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">delete</span> id=&quot;deleteByIds&quot;&gt;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">from</span> studentsinformation <span class="keyword">where</span> nums <span class="keyword">in</span> (</span><br><span class="line">    &lt;<span class="keyword">foreach</span> collection=&quot;numss&quot; item=&quot;nums&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">        #&#123;nums&#125;</span><br><span class="line">    &lt;/<span class="keyword">foreach</span>&gt;</span><br><span class="line">    );</span><br><span class="line">&lt;/<span class="keyword">delete</span>&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC的学习</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC的介绍"><a href="#JDBC的介绍" class="headerlink" title="- JDBC的介绍"></a>- JDBC的介绍</h2><p><strong>概念：</strong> JDBC就是使用java语言操作关系型数据库的一套API<br><strong>本质：</strong> </p><ul><li>官方(sun公司)定义的一套所有关系型数据库的规则，即接口</li><li>各个数据库厂商为实现这套接口提供数据库驱动jar包</li><li>使用JDBC编程时,真正执行的代码时驱动jar包中的实现类</li></ul><h2 id="JDBC的快速入门-基础步骤"><a href="#JDBC的快速入门-基础步骤" class="headerlink" title="- JDBC的快速入门(基础步骤)"></a>- JDBC的快速入门(基础步骤)</h2><p><strong>格式：</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span><span class="keyword">for</span><span class="constructor">Name(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)</span>;<span class="comment">//此处可省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">String url = <span class="string">&quot;jdbc:mysql://localhost:3306/dbl?useSSL=false&amp;useServerPrepstmts=true&quot;</span>;</span><br><span class="line">String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">String password=<span class="string">&quot;1234&quot;</span>;</span><br><span class="line">Connection conn =<span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>get<span class="constructor">Connection(<span class="params">url</span>,<span class="params">username</span>,<span class="params">password</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.定义sql</span></span><br><span class="line">String sql=<span class="string">&quot;sql语句&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql的对象Statement</span></span><br><span class="line">Statement stat=conn.create<span class="constructor">Statement()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.执行sql并记录改变语句数目</span></span><br><span class="line"><span class="built_in">int</span> count =stat.execute<span class="constructor">Update(<span class="params">sql</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.处理结果</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.释放资源</span></span><br><span class="line">stat.close<span class="literal">()</span>;</span><br><span class="line">conn.close<span class="literal">()</span>;</span><br></pre></td></tr></table></figure><h2 id="JDBC-API详解"><a href="#JDBC-API详解" class="headerlink" title="- JDBC API详解"></a>- JDBC API详解</h2><h3 id="DriverManager-驱动管理类"><a href="#DriverManager-驱动管理类" class="headerlink" title="DriverManager(驱动管理类):"></a>DriverManager(驱动管理类):</h3><ol><li><strong>注册驱动</strong> <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code><ul><li>查看Driver类源码   <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">        DriverManager.  registerDriver(<span class="keyword">new</span> <span class="type">Driver</span>());</span><br><span class="line">    &#125; <span class="keyword">catch</span>(SQLException var1)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><strong>获取连接</strong> <code>Connection conn =DriverManager.getConnection(url,username,password);</code></li></ol><h3 id="Connection-数据库连接对象"><a href="#Connection-数据库连接对象" class="headerlink" title="Connection(数据库连接对象):"></a>Connection(数据库连接对象):</h3><ol><li><p><strong>获取执行SQL的对象</strong></p><ul><li>普通执行SQL对象 <code> conn.createStatement()</code></li><li>预编译SQL的执行SQL对象：防止SQL注入 <code> conn.prepareStatement(sql)</code></li><li>执行存储过程的对象(不常使用) <code> conn.prepareCall(sql)</code></li></ul></li><li><p><strong>事务管理</strong></p><ul><li>MySql事务管理(MySQL默认自动提交事务) <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启事务: <span class="keyword">begin</span>;/<span class="keyword">start</span> <span class="keyword">transaction</span></span><br><span class="line">提交事务: <span class="keyword">commit</span>;</span><br><span class="line">回滚事务: <span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure></li><li>JDBC事务管理(配合try-catch块使用，于try块中发现异常，抛出给catch块回滚)：Connection接口定义了3个对应方法 <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启事务: conn.setAutoCommit(<span class="type">boolean</span> autoCommit)<span class="keyword">true</span>为自动提交事务,<span class="keyword">false</span>为手动提交，即开启事务</span><br><span class="line">提交事务: conn.<span class="keyword">commit</span>()</span><br><span class="line">回滚事务: conn.<span class="keyword">rollback</span>() </span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement:"></a>Statement:</h3><ul><li><strong>执行SQL语句</strong><ul><li><p>执行DML、DDL语句，返回值为int型<br>  <code> stat.executeUpdate(sql)</code><br>  (1)执行DML语句时返回受影响行数，用if判断执行是否成功<br>  (2)执行DDL语句时返回结果不确定，建议用try-catch来判断是否返回成功</p></li><li><p>执行DQL语句，返回值为ResultSet结果集对象<br>  <code> stat.executeQuery(sql)</code></p></li></ul></li></ul><h3 id="ResultSet-结果集对象"><a href="#ResultSet-结果集对象" class="headerlink" title="ResultSet(结果集对象):"></a>ResultSet(结果集对象):</h3><ul><li><strong>获取查询结果</strong><ul><li><code>next(); </code><br>  作用：(1)将游标从当前位置移动至下一行位置(初始位置为表头，向下移动) (2)判断当前行是否为有效行<br>  返回值：boolean型, true代表当前行为有效行，存在数据，反之。</li><li><code>getXxx(参数);</code><br>  作用：获取数据,Xxx表示数据类型<br>  返回值：xxx; int型时代表列的编号，从1开始; String型代表列名…</li></ul></li><li><strong>使用步骤</strong><ol><li>游标向下移动一行，判断该行是否有数据</li><li>获取数据<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>判断游标是否是最后一行末尾</span><br><span class="line"><span class="keyword">while</span>(rs.<span class="keyword">next</span>())&#123;</span><br><span class="line">    <span class="regexp">//</span>获取数据</span><br><span class="line">    rs.getXxx(参数);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><ul><li><strong>预编译SQL与防SQL注入并执行SQL语句</strong> <ul><li><strong>防SQL注入原理：</strong> 将’等敏感字符转义，阻止其与sql语句连接</li><li><strong>预编译的好处及开启方法：</strong> 预编译SQL使性能更高，且编译一次后多次使用sql语句不需要再编译; 使用前于url处添加useServerPrepStmts&#x3D;true参数</li><li><strong>使用步骤：</strong> <ol><li>获取PreparedStatement对象 <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//<span class="keyword">SQL</span>语句中的参数值用？占位符代替</span><br><span class="line">String <span class="keyword">sql</span>=&quot;select * from user where username=? and password=?&quot;;</span><br><span class="line">//通过<span class="keyword">Connection</span>对象获取，并传入相应<span class="keyword">SQL</span>语句</span><br><span class="line">PreparedStatement pstmt=conn.prepareStatement(<span class="keyword">sql</span>);</span><br></pre></td></tr></table></figure></li><li>设置参数值 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>给？问号赋值，参数为第n个？的位置，从<span class="number">1</span>开始编号</span><br><span class="line">pstmt.setXxx(参数<span class="number">1</span>，参数<span class="number">2</span>) </span><br></pre></td></tr></table></figure></li><li>执行SQL<br> <code>pstmt.executeUpdate();/pstmt.executeQuery(); </code></li></ol></li></ul></li></ul><p>##数据库连接池<br><strong>概念：</strong> 连接池是一个容器，负责分配、管理数据库连接(Connection)<br><strong>好处：</strong> 资源重用; 提升系统响应速度; 避免数据库连接遗漏<br><strong>使用：</strong> 使用德鲁伊(Druid)连接池         </p><h2 id="JDBC使用步骤-较入门步骤详细"><a href="#JDBC使用步骤-较入门步骤详细" class="headerlink" title="- JDBC使用步骤(较入门步骤详细)"></a>- JDBC使用步骤(较入门步骤详细)</h2><p><strong>步骤：</strong></p><ul><li>获取Connection (固定填写)</li><li>定义SQL</li><li>获取PreparedStatement对象 (固定填写)</li><li>设置参数 (根据SQL语句判断存在填写占位符? 存在则填写)</li><li>执行SQL</li><li>处理结果(根据实际填写具体措施)</li><li>释放资源</li></ul><p>eg:查询学生表中所有学生数据：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取连接</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="constructor">FileInputStream(<span class="string">&quot;jdbc-demo/src/druid.properties&quot;</span>)</span>);</span><br><span class="line">DataSource dataSource =<span class="module-access"><span class="module"><span class="identifier">DruidDataSourceFactory</span>.</span></span>create<span class="constructor">DataSource(<span class="params">prop</span>)</span>;</span><br><span class="line">Connection conn=dataSource.get<span class="constructor">Connection()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义sql</span></span><br><span class="line">String sql=<span class="string">&quot;select * from studentsinformation&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取pstmt对象</span></span><br><span class="line"> PreparedStatement pstmt=conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.设置参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.执行sql</span></span><br><span class="line">ResultSet rs=pstmt.execute<span class="constructor">Query()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.处理结果</span></span><br><span class="line">    <span class="comment">//创建集合和类的对象</span></span><br><span class="line">    List&lt;studentsInformation&gt; sis=<span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    studentsInformation si=null;</span><br><span class="line">    <span class="keyword">while</span>(rs.next<span class="literal">()</span>)&#123;</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="built_in">int</span> nums = rs.get<span class="constructor">Int(<span class="string">&quot;nums&quot;</span>)</span>;</span><br><span class="line">        String name = rs.get<span class="constructor">String(<span class="string">&quot;name&quot;</span>)</span>;</span><br><span class="line">        String sex = rs.get<span class="constructor">String(<span class="string">&quot;sex&quot;</span>)</span>;</span><br><span class="line">        String birth = rs.get<span class="constructor">String(<span class="string">&quot;birth&quot;</span>)</span>;</span><br><span class="line">        double score=rs.get<span class="constructor">Double(<span class="string">&quot;score&quot;</span>)</span>;</span><br><span class="line">        String email=rs.get<span class="constructor">String(<span class="string">&quot;email&quot;</span>)</span>;</span><br><span class="line">        String phone=rs.get<span class="constructor">String(<span class="string">&quot;phone&quot;</span>)</span>;</span><br><span class="line">        <span class="built_in">int</span> statement=rs.get<span class="constructor">Int(<span class="string">&quot;statement&quot;</span>)</span>;</span><br><span class="line">        <span class="comment">//封装对象</span></span><br><span class="line">        si=<span class="keyword">new</span> students<span class="constructor">Information()</span>;</span><br><span class="line">        si.set<span class="constructor">Birth(<span class="params">birth</span>)</span>;</span><br><span class="line">        si.set<span class="constructor">Email(<span class="params">email</span>)</span>;</span><br><span class="line">        si.set<span class="constructor">Name(<span class="params">name</span>)</span>;</span><br><span class="line">        si.set<span class="constructor">Nums(<span class="params">nums</span>)</span>;</span><br><span class="line">        si.set<span class="constructor">Phone(<span class="params">phone</span>)</span>;</span><br><span class="line">        si.set<span class="constructor">Score(<span class="params">score</span>)</span>;</span><br><span class="line">        si.set<span class="constructor">Sex(<span class="params">sex</span>)</span>;</span><br><span class="line">        si.set<span class="constructor">Statement(<span class="params">statement</span>)</span>;</span><br><span class="line">        <span class="comment">//装载至集合</span></span><br><span class="line">        sis.add(si);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sis);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//7.释放资源</span></span><br><span class="line">rs.close<span class="literal">()</span>;;</span><br><span class="line">pstmt.close<span class="literal">()</span>;</span><br><span class="line">conn.close<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql的sql语法学习</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="- 数据库的增删改查"></a>- 数据库的增删改查</h2><p><strong>命令行打开mysql:</strong> mysql -uroot -p1234</p><p><strong>查询数据库：</strong> show databases;<br><strong>创建数据库：</strong> </p><ul><li>直接法：create database 库名;</li><li>间接法：create database if not exists;</li></ul><p><strong>删除数据库：</strong></p><ul><li>直接法：drop database 库名;</li><li>间接法：drop database if exists 库名;</li></ul><p><strong>使用数据库：</strong> use 库名<br><strong>查看当前所使用的数据库：</strong> select database();<br>##常用数据类型<br><strong>数值型：</strong> int,float,double <u>(用法：double(总长度(总长度为小数点前后总个数),小数点后保留位数),eg：double(5,2)表示整数范围取值0~100,小数点保留2位)</u><br><strong>日期和时间类型：</strong> date(日期值),time(时间值或持续时间),year(年份),datetime(年月日时分秒)<br><strong>字符串类型：</strong> char,varchar <u>用法：char()表示定长字符串,无论得到的字符串长度多少,都按括号内规定的空间存储,因此存储性能高,浪费空间(空间换时间);varchar()表示变长字符串,先计算得到的字符串长度,再根据这串长度分配空间存储,因此存储性能低,节约空间(时间换空间)</u></p><h2 id="DDL——操作表-要执行以下操作得先进入相关数据库中"><a href="#DDL——操作表-要执行以下操作得先进入相关数据库中" class="headerlink" title="- DDL——操作表(要执行以下操作得先进入相关数据库中"></a>- DDL——操作表(要执行以下操作得先进入相关数据库中</h2><p><strong>查询表：</strong> show tables;<br><strong>查询表的结构:</strong> desc 表名;<br><strong>创建表：</strong> </p><ul><li>create table 表名(<br>  字段1 数据类型1,<br>  字段2 数据类型2,<br>  ………<br>  字段n 数据类型n(此处无,)<br>  );</li></ul><p><strong>删除表：</strong> </p><ul><li>直接法：drop table 表名;</li><li>间接法：drop table if exists 表名;</li></ul><p><strong>修改表：</strong> </p><ol><li>修改表名：alter table 表名 rename to 新表名;</li><li>添加一列新数据：alter table 表名 add 列名 数据类型;</li><li>修改数据类型：alter table 表名 modify 列名 新数据类型;</li><li>修改列名和数据类型：alter table 表名 change 列名 新列名 新数据类型;</li><li>删除列：alter table 表名 drop 列名;</li></ol><h2 id="DML——操作数据"><a href="#DML——操作数据" class="headerlink" title="- DML——操作数据"></a>- DML——操作数据</h2><p><strong>查询所有数据：</strong> select * from 表名;<br><strong>添加：</strong> </p><ol><li>给指定的列添加数据：insert into 表名(列名1,列名2,……) values(值1,值2,……);</li><li>给全部列添加数据：insert into 表名 values(值1,值2,……);<em>注：不建议如此做,建议使用上面的方法,将所有列名打出来,这样更为直观</em></li><li>批量添加数据： insert into 表名(列名1,列名2,……) values(值1,值2,……),(值      1,值2,……);<br><em>注：即在values处按格式以此添加就好,中间用逗号隔开</em></li></ol><p><strong>修改表数据：</strong> update 表名 set 列名1&#x3D;值1,列名2&#x3D;值2,… where 条件(列名n&#x3D;值        n)<br><em>特别注意：一定要加上条件,不然会导致表中全部数据被修改,且该行为无法撤销！！！</em><br><strong>删除表数据：</strong> delete from 表名 where 条件<br><em>特别注意：一定要加上条件,不然会导致表中全部数据被修改,且该行为无法撤销！！！</em></p><h2 id="DQL——查询数据-的意思为全部-可放于列名处"><a href="#DQL——查询数据-的意思为全部-可放于列名处" class="headerlink" title="- DQL——查询数据(*的意思为全部,可放于列名处)"></a>- DQL——查询数据(*的意思为全部,可放于列名处)</h2><p><em>注:一下查询方法并非完全独立,可组合进行</em></p><p><strong>基础查询：</strong> select 列名1 ,列名2 from 表名;<br><code> eg: select name,math from students;</code></p><p><strong>去重查询：</strong> select distinct 列名1,列名2 from 表名;<br><code>eg:select distince name,id from students;</code><br><strong>加别名查询：</strong> select 列名1 as 注释,列名2 as 注释 from表名;<br><code> eg:select name as 小王 from students;</code></p><p><strong>条件查询(where)：</strong> select 列名1 from 表名 where 条件;<br><u>eg:查询名字中含有“花”的学员都有谁:</u> <code>select name from students like %花%;</code><br><em>(可选条件与java运算符一致,特别记忆：是NULL： is null;不是NULL： is not null;模糊查询：like(_下划线表示单个模糊字符,%百分号表示多个任意字符; 日期差值：datediff (日期1, 日期2) 得到的结果是日期1与日期2相差的天数)</em></p><p><strong>排序查询(order by)：</strong> select * from 表名 order by 列名1 排序方法,列名2 排序方法(asc为升序,desc为降序,默认升序);<br><u>eg:查询学生信息,按年龄升序排列:</u> <code>select * from students order by age asc;</code><br> <em>(若有多个排序要求,则先满足前面的,在执行后面的)</em></p><p><strong>聚合查询：</strong> select 聚合函数名(列名)from 表名;(聚合函数：统计数量：count;求最大值：max;求最小值：min;求和：sum;求平均值：avg;<em>特殊的：null值不参与所有聚合函数运算;count配套的列名一般直接用</em>)*<br><u>eg: 求全班数学成绩平均分:</u> <code> select avg(math) from students;</code></p><p><strong>分组查询(group by)：</strong> select 字段列(聚合函数,参与分组列) from 表名 【where 分组前的条件限定】group by 列名 【having 分组后的条件筛选】<br><u>eg:查询男女同学各自平均分和人数：</u> <code>select sex,avg(math),count(*) from students group by sex;</code><br><u>eg:查询男女同学各自平均分和人数,要求分数低于70分不参与分组,分组后人数需大于2：</u> <code>select sex,avg(math),count(*) from students where math&gt;70 group by sex having count(*)&gt;2;</code><br><em>特别注意：分组之后查询的字段为聚合函数和参与分组的列,查询其他的列无意义   执行顺序：where&gt;聚合函数&gt;having,即where是对分组前进行限定,不满足条件不参与分组,故where后不接聚合函数,having是对分组结果进行筛选,接聚合函数。</em></p><p><strong>分页查询(limit)：</strong> select 列名 from 表名 limit 起始索引(起始索引&#x3D;(查询页数-1)*每页显示条数)每页显示条数;<br><u>eg：每页显示10条数据,查询第一页数据：</u> <code> select * from students limit 0,10;</code></p><p><strong>笛卡尔积：</strong> 集合A有m个数据,集合B有n个数据,A,B集合所有组合情况称为笛卡尔积。</p><p><strong>多表查询(即在表名位置输入多个表)：</strong> </p><ol><li><strong>连接查询:</strong><ul><li><strong>内连接查询(相当于查询A,B集合的交集)：</strong><br> –隐式内连接：select 列名 from 表1,表2… where 条件;<br> –显示内连接：select 列名 from 表1 join 表2 on 条件</li><li><strong>外连接查询(相当于查询某表所有数据和交集部分数据):</strong><br> –左外连接： select 列名 from 表1 left join 表2 on 条件<br> –右外连接(本质上与左外连接没区别,推荐用左)：select 列名 from 表1 right join 表2 on 条件</li></ul></li><li><strong>子查询(嵌套查询)：</strong><ul><li><strong>单行单列：</strong> select 列名 from 表名 where 条件&gt;子查询(select 列名……)<br>  <u>eg：查询年龄比张三大的人信息：</u> <code>select * from emp where age&gt;(select age from emp where name =&#39;张三&#39;);</code></li><li><strong>多行多列(将经过筛选的表放入from后面的表中)：</strong> select 列名 from (子查询),表1 where 条件;</li></ul></li></ol><h2 id="约束—————"><a href="#约束—————" class="headerlink" title="- 约束—————"></a>- 约束—————</h2><p><strong>约束的概念：</strong> </p><ul><li>约束是作用于表中列上的规则,用于限制加入表的数据;</li><li>约束的存在保证了数据库中数据的正确性、有效性和完整性</li></ul><table><thead><tr><th align="left">约束名称</th><th align="center">描述</th><th align="right">关键字</th></tr></thead><tbody><tr><td align="left">非空约束</td><td align="center">保证列中所有数据不存在null值</td><td align="right">not null</td></tr><tr><td align="left">唯一约束</td><td align="center">保证列中所有数据不相同</td><td align="right">unique</td></tr><tr><td align="left">主键约束</td><td align="center">主键是一行数据的唯一标识,要求非空且唯一</td><td align="right">primary key</td></tr><tr><td align="left">检查约束(mysql不存在)</td><td align="center">保证列中的值满足某一条件</td><td align="right">check</td></tr><tr><td align="left">默认约束</td><td align="center">保存数据时,未指定的值采用默认值</td><td align="right">default</td></tr><tr><td align="left">外键约束</td><td align="center">外键使两个表的数据建立链接,保证数据的一致性与完整性</td><td align="right">foreign key</td></tr></tbody></table><p><strong>非空,唯一,主键,默认约束的例子：</strong><br>创建员工表：(多个约束条件平行存在,不需要连接符连接)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,<span class="comment">--员工id,主键且自增长</span></span><br><span class="line">ename <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span>, <span class="comment">--员工姓名,非空且唯一</span></span><br><span class="line">joindate <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="comment">--入职日期,非空</span></span><br><span class="line">salary <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,<span class="comment">--工资,非空</span></span><br><span class="line">bonus <span class="keyword">double</span> (<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="number">0</span> <span class="comment">--奖金,如果没有默认为0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>自增长：</strong> auto_increment 当列为数字类型并且被唯一与非空约束所修饰可使用,一般与主键配合使用<br><strong>外键约束(将从表中某一列名与主表某一列名关联,形成物理上的关系)：</strong> </p><ul><li><strong>添加外键：</strong> <ul><li>创建表的时候添加外键约束：于表最后一行添加逗号“,” constraint  外键名(fk_从表名_主表名) foreign key(从表列名) references 主表表名(主表列名)</li><li>建完表后添加外键约束：alter table 表名 add constraint fk_从表名_主表名 foreign key(从表列名) references 主表表名(主表列名);<br><u>eg:将员工表emp中的部门(列名：dep_id)与部门表dept的部门(列名：id)进行外键约束：</u > <code>constraint fk_emp_dept foreign key(dep_id)references dept(id)</code></li></ul></li><li><strong>删除外键：</strong> alter table 从表表名 drop foreign key fk_从表名_主表名;</li></ul><h2 id="事务————"><a href="#事务————" class="headerlink" title="- 事务————"></a>- 事务————</h2><p><strong>事务简介：</strong> </p><ul><li>数据库的事务是一种机制、一个操作序列,包含了一组数据库操作命令</li><li>事务把所有的命令作为一个<strong>整体</strong>向系统提交或撤销操作请求,即这一组数据库命令要么同时成功,要么同时失败</li><li>事务是一个不可分割的工作逻辑单元</li></ul><p><strong>开启事务：</strong> begin;<br><strong>提交事务：</strong> commit;<br><strong>回滚事务(回到开启事务时的数据)：</strong> rollback;</p><p><strong>事务的四大特征(ACID)：</strong></p><ul><li><strong>原子性(Atomicity) ：</strong> 事务是不可分割的最小操作单位,要么同时成功,要么同时失败</li><li><strong>一致性(Consistency)：</strong> 事务完成时,必须使所有的数据都保持一致状态</li><li><strong>隔离性(Isolation)：</strong> 多个事务之间,操作的可见性</li><li><strong>持久性(Durability)：</strong> 事务一旦提交或回滚,它对数据库中的数据的改变就是永久的</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
